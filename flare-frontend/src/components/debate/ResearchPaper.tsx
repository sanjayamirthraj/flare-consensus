"use client";

import { useState, useEffect, useRef } from "react";
import { motion } from "framer-motion";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { ResearchPaperResponse } from "@/services/debateService";
import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';

interface ResearchPaperProps {
  paperData: ResearchPaperResponse;
  isOpen: boolean;
  onClose: () => void;
  topic: string;
}

export function ResearchPaper({ paperData, isOpen, onClose, topic }: ResearchPaperProps) {
  const [selectedSection, setSelectedSection] = useState<string>("all");
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const contentRef = useRef<HTMLDivElement>(null);
  
  // Reset section selection when paper changes
  useEffect(() => {
    setSelectedSection("all");
  }, [paperData]);
  
  if (!isOpen) return null;
  
  const formatSection = (text: string) => {
    if (!text) return <p className="text-gray-500 italic">No content available</p>;
    
    return text.split('\n').map((paragraph, index) => (
      <p key={index} className={`${index > 0 ? "mt-4" : ""} leading-relaxed text-gray-700`}>
        {paragraph}
      </p>
    ));
  };

  const handleExport = async () => {
    setIsLoading(true);
    
    try {
      if (!contentRef.current) {
        throw new Error("Content ref is not available");
      }
      
      // Create a new jsPDF instance (A4 paper, portrait orientation)
      const pdf = new jsPDF('p', 'mm', 'a4');
      
      // Define PDF dimensions
      const pdfWidth = pdf.internal.pageSize.getWidth();
      const pdfHeight = pdf.internal.pageSize.getHeight();
      const margin = 10; // margin in mm
      
      // Add title
      pdf.setFontSize(18);
      pdf.setTextColor(40);
      pdf.text(paperData.title || `Research Analysis: ${topic}`, margin, margin + 10);
      
      // Add date
      pdf.setFontSize(10);
      pdf.setTextColor(100);
      pdf.text(`Generated by Flare Consensus â€¢ ${new Date().toLocaleDateString()}`, margin, margin + 18);
      
      // Start content position
      let yPosition = margin + 25;
      
      // Helper function to add a section to the PDF
      const addSectionToPdf = (title: string, content: string) => {
        // Add section title
        pdf.setFontSize(14);
        pdf.setTextColor(40);
        pdf.text(title, margin, yPosition);
        yPosition += 7;
        
        // Add section content
        pdf.setFontSize(12);
        pdf.setTextColor(80);
        
        // Split text into paragraphs
        const paragraphs = content.split('\n').filter(p => p.trim().length > 0);
        
        paragraphs.forEach(paragraph => {
          // Split paragraph into lines that fit on the page
          const textLines = pdf.splitTextToSize(paragraph, pdfWidth - (margin * 2));
          
          // Check if we need a new page
          if (yPosition + (textLines.length * 6) > pdfHeight - margin) {
            pdf.addPage();
            yPosition = margin + 10;
          }
          
          // Add lines to PDF
          pdf.text(textLines, margin, yPosition);
          yPosition += (textLines.length * 6) + 5;
        });
        
        // Add space after section
        yPosition += 5;
      };
      
      // Add Abstract
      addSectionToPdf("Abstract", paperData.abstract);
      
      // Add Introduction if available
      if (paperData.introduction) {
        addSectionToPdf("Introduction", paperData.introduction);
      }
      
      // Add Perspectives
      if (paperData.perspectives.length > 0) {
        // Section title
        pdf.setFontSize(14);
        pdf.setTextColor(40);
        pdf.text("Perspectives", margin, yPosition);
        yPosition += 7;
        
        // Each perspective
        paperData.perspectives.forEach((perspective) => {
          // Check if we need a new page
          if (yPosition > pdfHeight - 40) {
            pdf.addPage();
            yPosition = margin + 10;
          }
          
          // Perspective title
          pdf.setFontSize(13);
          pdf.setTextColor(60);
          pdf.text(`${perspective.stance} Perspective`, margin, yPosition);
          yPosition += 6;
          
          // Perspective content
          pdf.setFontSize(12);
          pdf.setTextColor(80);
          
          // Split text into paragraphs
          const paragraphs = perspective.content.split('\n').filter(p => p.trim().length > 0);
          
          paragraphs.forEach(paragraph => {
            // Split paragraph into lines that fit on the page
            const textLines = pdf.splitTextToSize(paragraph, pdfWidth - (margin * 2));
            
            // Check if we need a new page
            if (yPosition + (textLines.length * 6) > pdfHeight - margin) {
              pdf.addPage();
              yPosition = margin + 10;
            }
            
            // Add lines to PDF
            pdf.text(textLines, margin, yPosition);
            yPosition += (textLines.length * 6) + 5;
          });
          
          // Add space after perspective
          yPosition += 5;
        });
      }
      
      // Add Discussion if available
      if (paperData.discussion) {
        addSectionToPdf("Discussion", paperData.discussion);
      }
      
      // Add Conclusion if available
      if (paperData.conclusion) {
        addSectionToPdf("Conclusion", paperData.conclusion);
      }
      
      // Add References if available
      if (paperData.references.length > 0) {
        // Section title
        pdf.setFontSize(14);
        pdf.setTextColor(40);
        pdf.text("References", margin, yPosition);
        yPosition += 7;
        
        // Each reference
        pdf.setFontSize(11);
        pdf.setTextColor(80);
        
        paperData.references.forEach((reference, index) => {
          // Split reference into lines that fit on the page
          const textLines = pdf.splitTextToSize(`${index + 1}. ${reference}`, pdfWidth - (margin * 2));
          
          // Check if we need a new page
          if (yPosition + (textLines.length * 5) > pdfHeight - margin) {
            pdf.addPage();
            yPosition = margin + 10;
          }
          
          // Add lines to PDF
          pdf.text(textLines, margin, yPosition);
          yPosition += (textLines.length * 5) + 3;
        });
      }
      
      // Save the PDF
      pdf.save(`Research_Paper-${topic.replace(/\s+/g, '_')}.pdf`);
    } catch (error) {
      console.error("Error generating PDF:", error);
      alert("There was an error generating the PDF. Please try again.");
    } finally {
      setIsLoading(false);
    }
  };
  
  const sectionNav = (
    <div className="flex flex-wrap gap-2 mb-6 border-b border-gray-200 pb-4 sticky top-0 bg-white z-10">
      <Button
        variant="ghost"
        size="sm"
        className={`text-sm ${selectedSection === 'all' ? 'bg-[#E71D73]/10 text-[#E71D73] hover:bg-[#E71D73]/20' : 'hover:bg-gray-100'}`}
        onClick={() => setSelectedSection('all')}
      >
        Full Paper
      </Button>
      <Button
        variant="ghost"
        size="sm"
        className={`text-sm ${selectedSection === 'abstract' ? 'bg-[#E71D73]/10 text-[#E71D73] hover:bg-[#E71D73]/20' : 'hover:bg-gray-100'}`}
        onClick={() => setSelectedSection('abstract')}
      >
        Abstract
      </Button>
      <Button
        variant="ghost"
        size="sm"
        className={`text-sm ${selectedSection === 'introduction' ? 'bg-[#E71D73]/10 text-[#E71D73] hover:bg-[#E71D73]/20' : 'hover:bg-gray-100'}`}
        onClick={() => setSelectedSection('introduction')}
      >
        Introduction
      </Button>
      <Button
        variant="ghost"
        size="sm"
        className={`text-sm ${selectedSection === 'perspectives' ? 'bg-[#E71D73]/10 text-[#E71D73] hover:bg-[#E71D73]/20' : 'hover:bg-gray-100'}`}
        onClick={() => setSelectedSection('perspectives')}
      >
        Perspectives
      </Button>
      <Button
        variant="ghost"
        size="sm"
        className={`text-sm ${selectedSection === 'discussion' ? 'bg-[#E71D73]/10 text-[#E71D73] hover:bg-[#E71D73]/20' : 'hover:bg-gray-100'}`}
        onClick={() => setSelectedSection('discussion')}
      >
        Discussion
      </Button>
      <Button
        variant="ghost"
        size="sm"
        className={`text-sm ${selectedSection === 'conclusion' ? 'bg-[#E71D73]/10 text-[#E71D73] hover:bg-[#E71D73]/20' : 'hover:bg-gray-100'}`}
        onClick={() => setSelectedSection('conclusion')}
      >
        Conclusion
      </Button>
      <Button
        variant="ghost"
        size="sm"
        className={`text-sm ${selectedSection === 'references' ? 'bg-[#E71D73]/10 text-[#E71D73] hover:bg-[#E71D73]/20' : 'hover:bg-gray-100'}`}
        onClick={() => setSelectedSection('references')}
      >
        References
      </Button>
    </div>
  );
  
  const renderContent = () => {
    if (selectedSection === 'all') {
      return (
        <div className="space-y-8">
          {/* Abstract */}
          <section className="bg-white p-6 rounded-lg border border-gray-100 shadow-sm">
            <h3 className="text-xl font-bold mb-4 text-gray-800">Abstract</h3>
            <div className="text-gray-700">{formatSection(paperData.abstract)}</div>
          </section>
          
          {/* Introduction */}
          {paperData.introduction && (
            <section className="bg-white p-6 rounded-lg border border-gray-100 shadow-sm">
              <h3 className="text-xl font-bold mb-4 text-gray-800">Introduction</h3>
              <div className="text-gray-700">{formatSection(paperData.introduction)}</div>
            </section>
          )}
          
          {/* Perspectives */}
          {paperData.perspectives.length > 0 && (
            <section className="bg-white p-6 rounded-lg border border-gray-100 shadow-sm">
              <h3 className="text-xl font-bold mb-4 text-gray-800">Perspectives</h3>
              <div className="space-y-6">
                {paperData.perspectives.map((perspective, index) => (
                  <div key={index} className="border-l-4 border-[#E71D73]/30 pl-4 py-2">
                    <h4 className="text-lg font-semibold mb-2 text-gray-800">{perspective.stance} Perspective</h4>
                    <div className="text-gray-700">{formatSection(perspective.content)}</div>
                  </div>
                ))}
              </div>
            </section>
          )}
          
          {/* Discussion */}
          {paperData.discussion && (
            <section className="bg-white p-6 rounded-lg border border-gray-100 shadow-sm">
              <h3 className="text-xl font-bold mb-4 text-gray-800">Discussion</h3>
              <div className="text-gray-700">{formatSection(paperData.discussion)}</div>
            </section>
          )}
          
          {/* Conclusion */}
          {paperData.conclusion && (
            <section className="bg-white p-6 rounded-lg border border-gray-100 shadow-sm">
              <h3 className="text-xl font-bold mb-4 text-gray-800">Conclusion</h3>
              <div className="text-gray-700">{formatSection(paperData.conclusion)}</div>
            </section>
          )}
          
          {/* References */}
          {paperData.references.length > 0 && (
            <section className="bg-white p-6 rounded-lg border border-gray-100 shadow-sm">
              <h3 className="text-xl font-bold mb-4 text-gray-800">References</h3>
              <ul className="list-decimal list-inside space-y-2 text-gray-700">
                {paperData.references.map((reference, index) => (
                  <li key={index} className="ml-4 pl-2">{reference}</li>
                ))}
              </ul>
            </section>
          )}
        </div>
      );
    }
    
    // Render individual sections
    const renderSectionContent = (title: string, content: string | string[] | any[]) => (
      <section className="bg-white p-6 rounded-lg border border-gray-100 shadow-sm">
        <h3 className="text-xl font-bold mb-4 text-gray-800">{title}</h3>
        {Array.isArray(content) && title === "References" ? (
          <ul className="list-decimal list-inside space-y-2 text-gray-700">
            {content.map((item, index) => (
              <li key={index} className="ml-4 pl-2">{item}</li>
            ))}
          </ul>
        ) : Array.isArray(content) ? (
          <div className="space-y-6">
            {content.map((item, index) => (
              <div key={index} className="border-l-4 border-[#E71D73]/30 pl-4 py-2">
                <h4 className="text-lg font-semibold mb-2 text-gray-800">{item.stance} Perspective</h4>
                <div className="text-gray-700">{formatSection(item.content)}</div>
              </div>
            ))}
          </div>
        ) : (
          <div className="text-gray-700">{formatSection(content as string)}</div>
        )}
      </section>
    );
    
    switch (selectedSection) {
      case 'abstract':
        return renderSectionContent("Abstract", paperData.abstract);
      case 'introduction':
        return renderSectionContent("Introduction", paperData.introduction);
      case 'perspectives':
        return renderSectionContent("Perspectives", paperData.perspectives);
      case 'discussion':
        return renderSectionContent("Discussion", paperData.discussion);
      case 'conclusion':
        return renderSectionContent("Conclusion", paperData.conclusion);
      case 'references':
        return renderSectionContent("References", paperData.references);
      default:
        return null;
    }
  };
  
  return (
    <motion.div 
      className="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center overflow-hidden p-4"
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      exit={{ opacity: 0 }}
    >
      <motion.div 
        className="w-full max-w-5xl max-h-[90vh] bg-gray-50 rounded-xl shadow-xl overflow-hidden flex flex-col"
        initial={{ scale: 0.9, y: 20 }}
        animate={{ scale: 1, y: 0 }}
        transition={{ type: "spring", damping: 25, stiffness: 300 }}
      >
        <Card className="border-0 shadow-none h-full flex flex-col">
          <CardHeader className="border-b pb-4 flex flex-row justify-between items-center bg-white sticky top-0 z-20">
            <div>
              <CardTitle className="text-2xl font-bold text-gray-900">
                {paperData.title || `Research Analysis: ${topic}`}
              </CardTitle>
              <p className="text-sm text-gray-500 mt-1">
                Generated by Flare Consensus â€¢ {new Date().toLocaleDateString()}
              </p>
            </div>
            <div className="flex space-x-2">
              <Button 
                variant="outline" 
                size="sm"
                onClick={onClose}
                className="hover:bg-gray-100"
              >
                Close
              </Button>
              <Button 
                variant="outline" 
                size="sm"
                onClick={handleExport}
                disabled={isLoading}
                className="border-[#E71D73]/30 text-[#E71D73] hover:bg-[#E71D73]/5"
              >
                {isLoading ? (
                  <span className="flex items-center">
                    <span className="mr-2 inline-block w-2 h-2 bg-[#E71D73] rounded-full animate-ping"></span>
                    Generating PDF...
                  </span>
                ) : (
                  "Export as PDF"
                )}
              </Button>
            </div>
          </CardHeader>
          
          <CardContent 
            className="overflow-y-auto flex-grow p-6 custom-scrollbar"
            ref={contentRef}
          >
            {sectionNav}
            <div className="paper-content">
              {renderContent()}
            </div>
          </CardContent>
        </Card>
      </motion.div>
    </motion.div>
  );
} 